#!/usr/bin/env bash

# beep-alarm v0.1
# Copyright:
#     Copyright (C) 2011 Sergey Potapov (aka Blake)
# License:
#     GNU GPL version 2
#
#     This program is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as
#     published by the Free Software Foundation; either version 2 of
#     the License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#     General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software
#     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#     MA 02111-1307 USA

# USAGE:
#     beep-alarm [TIME] [OPTION VALUE]
# DESCRIPTION:
#     Waits until TIME comes and plays tune. If TIME is not specified plays 
#     right now.
#     You can specify file with tune in format for Nokie mobile phones.
#     To use this alarm you should have "beep" tool installed
# OPTIONS:
#     -r        repeat times, if '-1' - play ifinity, defaut is 10
#     -f        file with tune in Nokia format
#     -t        tempo, default is 120
#     -m        number of tune(melody)
# TUNES:
#      0        Kanlinka(russian song)
#      1        Kino - Pachka Sigaret 
#      2        Kino - Blood Type
#      3        Metallica - Unforgiven
#      4        Led Zeppelin - Stairway To Heaven
#      5        Papa Roach - Last Resort
#      6        Helloween - Power
# EXAMPLES:
#     beep-alarm 08:00 -r 20
#     beep-alarm 08:00 -f $HOME/nokia_music/kalinka.txt
#     beep-alarm -t 150 -m 1

function play_tune(){
    function play_note(){
        function get_note_freq(){
            # to lower case
            local item=$( echo $1 | tr [:upper:] [:lower:] )

            # if pause
            if [[ $item =~ "-" ]]; then
                echo 0
                return 0
            fi

            # grab octave number
            local octave=${item##*[-a-z]}

            # grab note letter
            local note=${item%[0-9]}
                  note=${note##*[^-a-z]}

            # frequencies for octave 4
            case $note in
                c|C)
                    local freq_4=2093 ;;
                d|D)
                    local freq_4=2349 ;;
                e|E)
                    local freq_4=2637 ;;
                f|F)
                    local freq_4=2794 ;;
                g|G)
                    local freq_4=3136 ;;
                a|A)
                    local freq_4=3520 ;;
                b|B)
                    local freq_4=3951 ;;
            esac

            # calculate freqency for neccessary octave
            local freq=$[freq_4 / 2**(4-octave)]

            # add semitone if sharp exists
            if [[ $item =~ "#" ]]; then
                freq=$[freq * 10594 / 10000]
            fi

            echo $freq
        }

        function get_note_delay(){
            # to lower case
            local item=$( echo $1 | tr [:upper:] [:lower:] )

            # grab note length: 8 for 1/8, 16 for 1/16 and so on.
            local note_length=${item%%[-.#a-z]*}

            # calculate delay in milliseconds
            local delay=$[400000/(TEMPO*note_length)]

            # add a half of delay if "." 
            if [[ $item =~ "." ]]; then
                delay=$[delay * 3 / 2]
            fi

            echo $delay
        }


        local delay=$(get_note_delay $1)
        local freq=$(get_note_freq $1)
        
        if [ $freq == 0 ]; then
            # wait a pause
            # hardcore converting to float, because we need milliseconds 
            # to be passed to `sleep`
            local tmp="000${delay}"
            local div=${tmp: -3}
            local int=${tmp%???}
            local float="${int}.${div}"

            sleep $float
        else
            beep -f $freq -l $delay
        fi
    }

    # play a tune note by note
    until [ $# == 0 ]; do
        play_note $1
        shift
    done
}

# add zeros if necessary
function format_time(){
    local mins=${1#*:}
    local hours=${1%:*}

    mins="00${mins}"
    hours="00${hours}"

    mins=${mins: -2}
    hours=${hours: -2}

    echo "${hours}:${mins}"
}

function print_help(){
    cat $0 | grep "^# [U]SAGE:" --color=never -A 22 | tr '#' ' '
}

function print_version(){
    cat $0 | grep "^# [b]eep-alarm" --color=never -A 4 | tr '#' ' '
}

# tunes
TUNES[0]="16a1 8g1 16e1 16f1 8g1 16e1 16f1 8g1 16f1 16e1 8d1 16a1 16a1 16g1 32- 32f1 16e1 16f1 8g1 16e1 16f1 8g1 16f1 16e1 4d1 8d2 4c2 16a1 16c2 16#a1 32a1 32g1 8f1 8c1 16a1 16c2 16#a1 32a1 32g1 8f1 8c1 8d1 16d1 16e1 16g1 16f1 16e1 16d1 8c1 8c1 4c1"
TUNES[1]="8c2 8e2 8b2 8a2 8e2 4c2 8g2 8e2 8c2 4d2 8a2 8#f2 8c2 4b1 8b2 8a2 8e2 4c2 8g2 8e2 8b1 4c2 8a2 8#f2 8c2 4b1"
TUNES[2]="8f2 8e2 16d2 16d2 8- 16a2 16a2 16a2 8d2 8d2 16d2 16d2 16e2 8f2 16e2 16e2 8- 16a2 16a2 16a2 16e2 4- 16e2 16e2 8f2 16f2 16d2 16f2 8f2 16f2 8d2 4- 16e2 16f2 4e2 4c2 4a1"
TUNES[3]="8e2 8#f2 8g2 8- 8g2 16- 16g2 16g2 16#f2 4d2 8#f2 4b1 8e2 8#f2 8e2 8- 8e2 8#f2 4g2 8b2 16- 16b2 16b2 16a2 8#f2 8- 8#f2 4#d2 16#f2 16#d2 16e2 16#f2 2e2"
TUNES[4]="8a2 8c2 8e2 8a2 8b2 8e2 8c2 8b2 8c3 8e2 8c2 8c3 8#f2 8d2 8a2 8#f2 8e2 8c2 8a2 4c2 8e2 8c2 8a1 8g1 8g1 8a1 4a1"
TUNES[5]="16e2 16- 16e2 16- 8e2 16g2 16- 16g2 16- 16d2 16- 8d2 8- 16e2 16- 16e2 16- 8e2 16g2 16- 16g2 16a2 4d2 8- 16e2 16e2 16e2 16- 16e2 16- 8e2 8g2 16d2 16- 8d2 16e2 16- 16e2 16e2 16e2 16- 16e2 16e2 16g2 16g2 8a2 4d2"
TUNES[6]="8e2 8d2 8d2 8c2 8b1 8a1 8b1 8c2 8f1 8e2 8d2 8- 8- 8d2 8c2 8b1 8a1 8g1 8a1 8b1 8e1 8d2 8c2 8- 8- 8e2 8d2 8c2 8b1 8a1 8b1 8c2 8f2 8g1 8a1 8- 8- 8f2 8e2 8d2 8c2 8b1 8c2 8d2 4c2 8- 8-"

# default options
REPEAT=10
TIME=0
TEMPO=120
TUNE=$TUNES[0]

# parse options
if [[ $1 =~ ":" ]]; then
    TIME=$(format_time $1)
    shift
fi
OPTERR=0  # silent mode for getopts
while getopts "r:f:t:m:" OPTION
do
    case $OPTION in
        r)
            REPEAT=$OPTARG;;
        f)
            read TUNE < $OPTARG;;
        t)
            TEMPO=$OPTARG;;
        m)
            TUNE=${TUNES[$OPTARG]};;
        ?)
            case $BASH_ARGV in
                -h|--help)
                    print_help
                    exit 0;;
                -v|--version)
                    print_version
                    exit 0;;
                *)
                    echo "Unknown option ${BASH_ARGV}" >&2
                    exit 1
            esac
    esac
done

# wait until time comes
until [ $TIME == $(date +%H:%M) ] || [ $TIME == 0 ]; do
    sleep 1
done

# play a tune
for((i=$REPEAT; i != 0; i--)); do
    play_tune $TUNE
done
